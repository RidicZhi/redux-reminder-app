{"version":3,"sources":["components/App.js","actions/index.js","constants/index.js","serviceWorker.js","reducer/index.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","text","dueTime","moment","Date","format","addReminder","setState","alert","id","deleteReminder","clearAllReminders","_this2","reminders","react_default","a","createElement","className","map","reminder","key","dueDate","fromNow","onClick","onDeleteClick","_this3","length","onClearAll","_this4","type","placeholder","value","onChange","e","target","onAddClick","renderList","renderClearButton","Component","connect","Boolean","window","location","hostname","match","getReminderData","action","Math","random","arguments","undefined","read_cookie","newReminders","concat","toConsumableArray","bake_cookie","filter","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","logger","ReactDOM","render","es","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.935057ec.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { addReminder, deleteReminder ,clearAllReminders } from \"../actions\";\nimport PropTypes from \"prop-types\";\nimport moment from 'moment';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      text: \"\",\n      dueTime: moment(new Date()).format('YYYY-MM-DDTHH:mm')\n    };\n  }\n\n  onAddClick() {\n    if(!this.state.text) {\n      alert('Please enter before adding');\n      return\n    }\n    this.props.addReminder(this.state.text, this.state.dueTime);\n    this.setState({\n      text: \"\",\n      dueTime: moment(new Date()).format('YYYY-MM-DDTHH:mm')\n    });\n  }\n\n  onDeleteClick(id) {\n    this.props.deleteReminder(id);\n  }\n\n  onClearAll() {\n    this.props.clearAllReminders();\n  }\n\n  renderList() {\n    const { reminders } = this.props;\n    return (\n      <ul className=\"list-group col-sm-8 mt-2\">\n        {reminders.map(reminder => (\n          <li className=\"list-group-item\" key={reminder.id}>\n            <div className=\"list-item\">\n              <div>{reminder.text}</div>\n              <div>\n                <em>{moment(new Date(reminder.dueDate)).fromNow()}</em>\n              </div>\n            </div>\n            <div \n              className=\"list-item delete-button text-danger\"\n              onClick = {() => this.onDeleteClick(reminder.id)}\n            >\n              &#x2715;\n            </div>\n          </li>\n        ))}\n      </ul>\n    );\n  }\n\n  renderClearButton() {\n    if(this.props.reminders.length === 0) {\n      return\n    }\n    return <div className=\"btn btn-danger btn-block mt-4\" onClick={() => this.onClearAll()}>Clear All</div>\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"title\">Reminder</div>\n        <div className=\"form-inline\">\n          <div className=\"form-group mr-2\">\n            <input\n              type=\"text\"\n              className=\"form-control mr-3\"\n              placeholder=\"to do...\"\n              value={this.state.text}\n              onChange={e => {\n                this.setState({ text: e.target.value });\n              }}\n            />\n            <input\n              type=\"datetime-local\"\n              className=\"form-control mr-3\"\n              value={this.state.dueTime}\n              onChange={e => {\n                this.setState({ dueTime: e.target.value });\n              }}\n            />\n          </div>\n          <button\n            type=\"button\"\n            className=\"btn btn-success\"\n            onClick={() => this.onAddClick()}\n          >\n            Add\n          </button>\n        </div>\n        {this.renderList()}\n        {this.renderClearButton()}\n      </div>\n    );\n  }\n}\n\nApp.propTypes = {\n  reminders: PropTypes.array.isRequired,\n  addReminder: PropTypes.func.isRequired,\n  deleteReminder: PropTypes.func.isRequired,\n  clearAllReminders: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => {\n  return {\n    reminders: state\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  { addReminder, deleteReminder, clearAllReminders }\n)(App);\n","import  { ADD_REMINDER, DELETE_REMINDER, CLEAR_ALL_REMINDERS }  from '../constants';\n\nexport const addReminder = (text, dueDate) => {\n  return {\n    type: ADD_REMINDER,\n    text,\n    dueDate\n  }\n};\n\nexport const deleteReminder = (id) => {\n  return {\n    type: DELETE_REMINDER,\n    id\n  }\n};\n\nexport const clearAllReminders = () => {\n  return {\n    type: CLEAR_ALL_REMINDERS\n  }\n}","export const ADD_REMINDER = \"ADD_REMINDER\";\nexport const DELETE_REMINDER = \"DELETE_REMINDER\";\nexport const CLEAR_ALL_REMINDERS = \"CLEAR_ALL_REMINDERS\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import  { ADD_REMINDER, DELETE_REMINDER, CLEAR_ALL_REMINDERS }  from '../constants';\nimport { bake_cookie, read_cookie } from 'sfcookies';\n\nconst getReminderData = (action) => {\n  const { text, dueDate } = action;\n\n  return {\n    text,\n    dueDate,\n    id: Math.random()\n  }\n}\n\nconst reminders = (state = read_cookie(\"reminders\") || [], action = {}) => {\n  let newReminders = null;\n\n  switch(action.type) {\n    case ADD_REMINDER:\n      newReminders = [\n        ...state,\n        getReminderData(action)\n      ];\n      bake_cookie(\"reminders\", newReminders);\n      return newReminders\n    case DELETE_REMINDER :\n      newReminders = state.filter(reminder => reminder.id !== action.id);\n      bake_cookie(\"reminders\", newReminders);\n      return newReminders;\n    case CLEAR_ALL_REMINDERS:\n      newReminders = [];\n      bake_cookie(\"reminders\", newReminders);\n      return newReminders;\n    default: return state;\n  }\n}\n\nexport default reminders;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport rootReducer from './reducer';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport logger from 'redux-logger';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(logger)\n  )\n);\n\nReactDOM.render(\n  <Provider store={ store }>\n    <App />\n  </Provider>, \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}